<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.kcs.rest.dao.OutBillDao" >


    <select id="insertOutBill" parameterType="com.kcs.rest.pojo.OutBill" resultType="java.lang.Integer">
        insert into [OutBill] (OutTime,CheckStatus,CheckTime,CheckMessage,OperateTime,AllTotal,StoreManager,Taker,Checker,TableMaker,Operator,Remark)
        values(#{outTime},#{checkStatus},#{checkTime},#{checkMessage},#{operateTime},#{allTotal},#{storeManager},#{taker},#{checker},#{tableMaker},#{operator},#{remark});
        select @@IDENTITY
    </select>

    <select id="findOutBillByID" parameterType="java.lang.Integer" resultType="com.kcs.rest.pojo.OutBill">
        select *
        from OutBill
        where OutBillID = #{OutBillID}
    </select>

    <select id="findTheMaxOutBillID" resultType="java.lang.Integer">
        select MAX(OutBillID)
        from OutBill
    </select>

    <delete id="delOutBillByOutBillID" parameterType="java.lang.Integer">
        delete from OutBill
        where OutBillID = #{OutBillID}
    </delete>

    <update id="updateOutBill" parameterType="com.kcs.rest.pojo.OutBill">
        update OutBill
        <trim prefix="set" suffixOverrides=",">
            <if test="OutTime!=null" >
                OutTime = #{OutTime,jdbcType=VARCHAR},
            </if>
            <if test="CheckStatus!=null" >
                CheckStatus = #{CheckStatus,jdbcType=INTEGER},
            </if>
            <if test="CheckTime!=null" >
                CheckTime = #{CheckTime,jdbcType=VARCHAR},
            </if>
            <if test="CheckMessage!=null" >
                CheckMessage = #{CheckMessage,jdbcType=VARCHAR},
            </if>
            <if test="OperateTime!=null" >
                OperateTime = #{OperateTime,jdbcType=VARCHAR},
            </if>
            <if test="AllTotal!=null" >
                AllTotal = #{AllTotal,jdbcType=DOUBLE},
            </if>
            <if test="StoreManager!=null" >
                StoreManager = #{StoreManager,jdbcType=INTEGER},
            </if>
            <if test="Taker!=null" >
                Taker = #{Taker,jdbcType=INTEGER},
            </if>
            <if test="Checker!=null" >
                Checker = #{Checker,jdbcType=INTEGER},
            </if>
            <if test="TableMaker!=null" >
                TableMaker = #{TableMaker,jdbcType=INTEGER},
            </if>
            <if test="Operator!=null" >
                Operator = #{Operator,jdbcType=INTEGER},
            </if>
            <if test="Remark!=null" >
                Remark = #{Remark,jdbcType=VARCHAR},
            </if>
        </trim>
        where OutBillID = #{OutBillID}
    </update>

    <update id="updateCheckByOutBillID" parameterType="com.kcs.rest.pojo.OutBill">
          update OutBill
          set
            CheckStatus = #{CheckStatus},
            CheckTime = #{CheckTime},
            CheckMessage = #{CheckMessage},
            Checker = #{Checker}
          where
            OutBillID = #{OutBillID}
    </update>

    <select id="ItemOutRecord" resultType="com.kcs.rest.pojo.OutBillPresent" parameterType="int">
        select top (#{back}- #{front}+1) * from (select Row_Number() over ( order by OutTime desc ) as id , * from (
           select a.OutBillID,b.ItemsOutID,a.OutTime,c.GoodsID,c.ItemsName,c.ItemsType,b.StorePosition,b.ItemNum,b.ItemPrice,b.ItemTotal,d.UserName as TakerName,a.CheckStatus,b.Note from OutBill as a
        left join ItemsOut as b
        on a.OutBillID =b.OutBillID
        left join Goods as c
        on b.GoodsID=c.GoodsID
        left join [User] as d
        on d.UserID = a.Taker where c.GoodsID = #{id}
            )as show)as show1
            where id not in (
                select top (#{front}-1) id from (select Row_Number() over ( order by OutTime desc ) as id , * from (
           select a.OutBillID,b.ItemsOutID,a.OutTime,c.GoodsID,c.ItemsName,c.ItemsType,b.StorePosition,b.ItemNum,b.ItemPrice,b.ItemTotal,d.UserName as TakerName,a.CheckStatus,b.Note from OutBill as a
        left join ItemsOut as b
        on a.OutBillID =b.OutBillID
        left join Goods as c
        on b.GoodsID=c.GoodsID
        left join [User] as d
        on d.UserID = a.Taker where c.GoodsID = #{id}
            )as show)as show1 )
    </select>

    <select id="CountItemOutRecord" parameterType="int" resultType="int">
    select COUNT(*) from (select a.OutBillID,b.ItemsOutID,a.OutTime,c.GoodsID,c.ItemsName,c.ItemsType,b.StorePosition,b.ItemNum,b.ItemPrice,b.ItemTotal,d.UserName as TakerName,a.CheckStatus,b.Note from OutBill as a
        left join ItemsOut as b
        on a.OutBillID =b.OutBillID
        left join Goods as c
        on b.GoodsID=c.GoodsID
        left join [User] as d
        on d.UserID = a.Taker where c.GoodsID = #{goodsID}
        ) as show
    </select>

    <select id="findTimeByID" parameterType="int" resultType="String">
        select OutTime from OutBill where OutBillID=#{outBillID}
    </select>
</mapper>